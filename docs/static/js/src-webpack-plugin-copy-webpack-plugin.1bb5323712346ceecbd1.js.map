{"version":3,"sources":["/Users/liliuyun/git/frontend-stories/src/webpack/plugin/CopyWebpackPlugin.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_liliuyun_git_frontend_stories_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","isMDXComponent"],"mappings":"mZAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,kCADR,kCAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,aADR,aAGAL,OAAAE,EAAA,EAAAF,CAAA,gGACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,IAA3B,6EAILN,OAAAE,EAAA,EAAAF,CAAA,iLACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,IAA3B,irBAQLN,OAAAE,EAAA,EAAAF,CAAA,gFACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,SADR,SAGAL,OAAAE,EAAA,EAAAF,CAAA,6hDAIJJ,EAAWW,gBAAiB","file":"static/js/src-webpack-plugin-copy-webpack-plugin.47738dca.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"copywebpackplugin-用法\"\n    }}>{`CopyWebpackPlugin 用法`}</h1>\n    <h2 {...{\n      \"id\": \"signature\"\n    }}>{`Signature`}</h2>\n    <p>{`CopyWebpackPlugin的构造函数接收两个参数`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`module.exports = {\n  plugins: [new CopyPlugin(patterns, options)],\n}\n`}</code></pre>\n    <p>{`patterns用来定制文件拷贝和转换的规则，以下列出一些常见的选项`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`interface Patterns {\n  from: string | object, // 文件来源，可以是路径或者glob，官方的glob示例为{ glob: '**/*', dot: false },\n  to: string, // 输出路径\n  toType: 'dir' | 'file' | 'template', // 其中template表示to需要由一定的规则生成，例如'dest/[name].[hash].[ext]'\n  ignore: Array<string>, // 忽略的文件正则,\n  transform: (source: string, path: string) => string | Promise<string>, // 拷贝时将文件进行转换，例如文件压缩\n}\n`}</code></pre>\n    <p>{`options不太常用，这里忽略。`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`这个plugin的主要作用就是用来拷贝文件的。所以常见的一种使用场景是在部署前把node_modules里的umd代码文件拷贝到静态目录输出，并且使用配置external的方式引入。在节省webpack打包时间的同时能稳定做到分包和使用缓存。需要注意的是，通常这些代码文件不带版本号，需要自行标记这些文件的版本号，以避免在umd包版本更新后用户仍然使用的是旧版本的文件强缓存。另一种使用场景是把一些资源文件拷贝到输出目录，例如icon，image等文件，在代码里只要写静态的文件目录就可以了，不必要使用file-loader（仍然需要注意强缓存问题）。`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}