{"version":3,"sources":["/Users/liliuyun/git/frontend-stories/src/webpack/webpack optimization.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_liliuyun_git_frontend_stories_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","isMDXComponent"],"mappings":"+YAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,wDADR,wDAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,cADR,cAGAL,OAAAE,EAAA,EAAAF,CAAA,gqBACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,iBADR,iBAGAL,OAAAE,EAAA,EAAAF,CAAA,wjBACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,eADR,eAGAL,OAAAE,EAAA,EAAAF,CAAA,iSACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,IAA3B,uDAELN,OAAAE,EAAA,EAAAF,CAAA,oxBACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,yBADR,yBAGAL,OAAAE,EAAA,EAAAF,CAAA,00CAKJJ,EAAWW,gBAAiB","file":"static/js/src-webpack-webpack-optimization.26ddb921.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"基于webpack-4-的配置优化\"\n    }}>{`基于webpack 4 的配置优化`}</h1>\n    <h2 {...{\n      \"id\": \"background\"\n    }}>{`Background`}</h2>\n    <p>{`从来没想过会有一天16G内存4核心会带不动一个前端项目。事实上我的个人情况是，工作中每次修改保存都需要再次编译2分钟以上，这是不可容忍的。于是进行了webpack4的升级。（不过我觉得要是物资那里愿意给我重新配一台32G内存8核心的电脑也是极好的）`}</p>\n    <h2 {...{\n      \"id\": \"configuration\"\n    }}>{`Configuration`}</h2>\n    <p>{`升级到webpack4，主要参照了create-react-app对于webpack4的相关配置进行，以下使用CRA来代指。一个题外话是当我开始进行优化的过程中发生了两个大事件，一是CRA发布了版本v3；二是Nodejs发布了v12.0。CRA在v2+版本的升级中主要如下的变化。`}</p>\n    <h3 {...{\n      \"id\": \"config-file\"\n    }}>{`Config File`}</h3>\n    <p>{`在之前的版本中，config文件分为dev和pro两个版本分别维护，在新版本中config中默认导出的是一个函数，签名为：`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`(env: 'develop' | 'production') => WebpackConfig\n`}</code></pre>\n    <p>{`事实上，这就是一个可以产生两种环境下webpack config的简单工厂。在日常的配置工作中，经常会担心改了一个环境的config忘了改另外一个，现在的方式能够很好的避免这点，减少在配置时的关注点，降低出错的概率。相应地，由于config的获取形式发生变化，在scripts文件夹下的start和build脚本也进行了相应更改。`}</p>\n    <h3 {...{\n      \"id\": \"babel-with-ts-support\"\n    }}>{`Babel with TS Support`}</h3>\n    <p>{`在新版的Babel中加入了对ts的支持，所以项目在升级时可以丢弃掉ts-loader的相关配置，直接使用babel-loader。注意配置相关的preset（可以使用CRA提供的'react-app'这个preset，基本囊括了所有的需求）。需要注意的是babel只针对单文件进行转换，并没有分析模块之间的关系，形成了事实上的isolatedModules。\n在使用babel对项目内的js文件做转换的同时，应该对一些单独的模块不做转换直接引入（如已经编译好的js文件，外部的js模块）。它们之间使用oneof来进行配置防止loader重复使用。`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}